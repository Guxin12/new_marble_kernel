name: Kernel Builder

on:
  workflow_dispatch: # 手动触发
    inputs:
      kpm_patch:
        description: "是否添加KPM修补？"
        type: boolean
        required: true
        default: true
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libncurses-dev \
            bison \
            flex \
            libssl-dev \
            libelf-dev \
            git \
            curl \
            unzip \
            bc \
            python3 \
            make \
            gcc \
            g++ \
            patch  # 确保安装patch工具

      - name: Checkout kernel source
        uses: actions/checkout@v4
        with:
          repository: Guxin12/marble_kernel
          ref: Glow-4LazyGoogle
          path: kernel
          fetch-depth: 0

      - name: Setup Clang toolchain
        run: |
          mkdir clang
          curl -L -o clang/clang.tar.gz https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/428d18d9732aa7ebfcaed87a582d86155db878d4/clang-r416183b.tar.gz
          tar -zxf clang/clang.tar.gz -C clang
          echo "CLANG_PATH=$(pwd)/clang/bin" >> $GITHUB_ENV

      # 步骤1: 应用SUSFS补丁
      - name: Apply SUSFS patch
        working-directory: ./kernel
        run: |
          echo "Applying SUSFS patch with fuzz=3..."
          patch -p1 --fuzz=3 < 50_add_susfs_in_gki-*.patch || true
          # 删除补丁文件
          rm -f 50_add_susfs_in_gki-*.patch
          echo "SUSFS patch applied and file removed"

      - name: Build kernel
        working-directory: ./kernel
        run: |
          # 设置环境变量
          export ARCH=arm64
          export PATH=${CLANG_PATH}:${PATH}
          export KBUILD_BUILD_HOST="Marble"
          export KBUILD_BUILD_USER="Guxin12"
          
          # 清理并配置编译环境
          make LLVM=1 LLVM_IAS=1 O=out mrproper
          make LLVM=1 LLVM_IAS=1 O=out marble_defconfig
          
          # 开始编译
          make LLVM=1 LLVM_IAS=1 O=out -j$(nproc --all)
          
          # 生成文件名
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          echo "IMAGE_NAME=marble-kernel-$TIMESTAMP" >> $GITHUB_ENV
          # 设置镜像路径
          echo "IMAGE_PATH=$(pwd)/out/arch/arm64/boot/Image" >> $GITHUB_ENV
          # 设置默认artifact前缀
          echo "ARTIFACT_PREFIX=original" >> $GITHUB_ENV

      # KPM修补步骤 - 仅在手动触发时选择添加KPM时执行
      - name: Patch Image for KPM (SukiSU)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.kpm_patch == true }}
        working-directory: ./kernel/out/arch/arm64/boot
        run: |
          echo "Patching Image file for KPM..."
          # 下载KPM修补工具
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
          chmod +x patch
          
          # 执行修补
          ./patch
          
          # 替换原始Image文件
          if [ -f "oImage" ]; then
            mv oImage Image
            echo "Image patched successfully for KPM"
            # 更新artifact前缀
            echo "ARTIFACT_PREFIX=kpm-patched" >> $GITHUB_ENV
          else
            echo "Error: Patch failed - oImage not found"
            exit 1
          fi

      # 准备AnyKernel3刷机包
      - name: Prepare AnyKernel3
        run: |
          # 克隆AnyKernel3模板
          git clone https://github.com/osm0sis/AnyKernel3.git
          
          # 写入自定义anykernel.sh内容
          cat > AnyKernel3/anykernel.sh << 'EOF'
          ### AnyKernel3 Ramdisk Mod Script
          ## osm0sis @ xda-developers

          ### AnyKernel setup
          # global properties
          properties() { '
          kernel.string=Melt by Guxin12 @酷安初春在路野
          do.devicecheck=1
          do.modules=0
          do.systemless=1
          do.cleanup=1
          do.cleanuponabort=0
          device.name1=marble
          device.name2=marblein
          device.name3=
          device.name4=
          device.name5=
          supported.versions=
          supported.patchlevels=
          supported.vendorpatchlevels=
          '; } # end properties


          ### AnyKernel install
          ## boot files attributes
          #boot_attributes() {
          #set_perm_recursive 0 0 755 644 $RAMDISK/*;
          #set_perm_recursive 0 0 750 750 $RAMDISK/init* $RAMDISK/sbin;
          #} # end attributes

          # boot shell variables
          BLOCK=boot;
          IS_SLOT_DEVICE=1;
          RAMDISK_COMPRESSION=auto;
          PATCH_VBMETA_FLAG=auto;

          # import functions/variables and setup patching - see for reference (DO NOT REMOVE)
          . tools/ak3-core.sh;

          # boot install
          if [ -L "/dev/block/bootdevice/by-name/init_boot_a" -o -L "/dev/block/by-name/init_boot_a" ]; then
              split_boot # for devices with init_boot ramdisk
              flash_boot # for devices with init_boot ramdisk
          else
              dump_boot # use split_boot to skip ramdisk unpack, e.g. for devices with init_boot ramdisk
              write_boot # use flash_boot to skip ramdisk repack, e.g. for devices with init_boot ramdisk
          fi
          ## end boot install
          EOF
          
          # 复制编译好的内核镜像到AnyKernel3目录
          cp ${{ env.IMAGE_PATH }} AnyKernel3/Image
          
          # 设置刷机包名称
          echo "ZIP_NAME=marblekernel.zip" >> $GITHUB_ENV

      # 打包AnyKernel3刷机包
      - name: Package AnyKernel3
        working-directory: ./AnyKernel3
        run: |
          # 创建刷机包
          zip -r9 ../${{ env.ZIP_NAME }} *

      # 上传步骤：同时上传Image和刷机包
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_PREFIX }}-kernel-${{ env.IMAGE_NAME }}
          path: |
            ${{ env.IMAGE_PATH }}
            ${{ env.ZIP_NAME }}
          retention-days: 7
